/*Numbers can be regarded as product of its factors. For example,

8 = 2 x 2 x 2;
  = 2 x 4.
Write a function that takes an integer n and return all possible combinations of its factors.

Note:

You may assume that n is always positive.
Factors should be greater than 1 and less than n.
Example 1:

Input: 1
Output: []
Example 2:

Input: 37
Output:[]
Example 3:

Input: 12
Output:
[
  [2, 6],
  [2, 2, 3],
  [3, 4]
]
Example 4:

Input: 32
Output:
[
  [2, 16],
  [2, 2, 8],
  [2, 2, 2, 4],
  [2, 2, 2, 2, 2],
  [2, 4, 4],
  [4, 8]*/
  
  C++:
  Backtrack solution:
  class Solution {
public:
    vector<vector<int>> getFactors(int n) {
        vector<vector<int>> result;
        if(n == 1){
            return result;
        }
        vector<int> path;
        backtrack(result,path,2,n);
        return result;
    }
    void backtrack(vector<vector<int>> &result, 
                   vector<int> &path,
                  int start,
                  int n){
        if(n <= 1){
            if(path.size() > 1){
                result.push_back(path);
                return;
            }
        }
        for(int i = start; i <= n; i++){
                if(n % i == 0){
                    path.push_back(i);
                    backtrack(result,path,i,n/i);
                    path.pop_back();
            }
        }
    }
};

