/*Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2*/


This question can have several solutions. The code below show the hashmap solution:


Java:

class Solution {
    public int majorityElement(int[] nums) {
        HashMap <Integer,Integer> hm = new HashMap<Integer,Integer>();
        int n = nums.length;
        for(int i = 0; i < nums.length; i++){
            if(hm.containsKey(nums[i])){
                int count = hm.get(nums[i]);
                if(count +1 > n/2){
                    return nums[i];
                }else{
                    hm.put(nums[i],count+1);
                }
            }else {
                hm.put(nums[i],1); 
                if(1 > n/2){
                      return nums[i];
                  }  
            }
        }
        return -1;
    }
}


C++:

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map <int,int> um;
        for(auto i:nums){
            um[i]++;
            if(um[i] > nums.size()/2) return i;
        }
        return -1;
    }
};


Other approaches:
Sorting  and then return the n/2 th element;
Divide and Conquer: 
Base case: the only element in an array of size 1 is the majority
recurse on left and right halves of this slice;
Time Complexity: O(nlogn)
Space Complexity: O(lgn)
Boyer-MooreVoting Algorithm:
Look for a suffix suf of nums where suf[0] is the majority element in that suffix; maintain a count
which is incremented whenever see an instance of current candidate for majority element and decremented
whenever we see anything else; whenever count equals 0; forget about everything in nums up to the current index
and consider the current num as the candidate for majority element.It is impossible to discard more
majority elements than minorty elements, safe in discarding the prefix and attempting to recursively solve the
majority element for the suffix.
Eventually, a suffix will be found for which count does not hit 0, and the majority element of that
suffix will necessarily be the same as the majority element of the overall array.

Implementation in Java:

class Solution {
    public int majorityElement(int[] nums) {
        int count = 0;
        Integer candidate = null;

        for (int num : nums) {
            if (count == 0) {
                candidate = num;
            }
            count += (num == candidate) ? 1 : -1;
        }

        return candidate;
    }
}

Implementation in C++:

class Solution {
public:
    int majorityElement(vector<int>& nums) {
       int count = 0;
        int candidate = nums.front();
        
        for(auto it = nums.begin(); it != nums.end();it++){
            if(count == 0){
                candidate = *it;
            }
            count+= (*it == candidate)? 1 : -1;
        }
        return candidate;
    }
}

