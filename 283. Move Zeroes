/*Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Example:

Input: [0,1,0,3,12]
Output: [1,3,12,0,0]
Note:

You must do this in-place without making a copy of the array.
Minimize the total number of operations.*/

C++:

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int zeros = 0;
        vector <int>::iterator it = nums.begin();
        while(it != nums.end()){
            if(*it == 0){
                it = nums.erase(it);
                zeros++;
            }else{
                it++;
            }
        }
        for(int j = 0; j < zeros; j++){
            nums.push_back(0);
        }
    }
};

Better C++:
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int j = 0;
        // move all the nonzero elements advance
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] != 0) {
                nums[j++] = nums[i];
            }
        }
        for (;j < nums.size(); j++) {
            nums[j] = 0;
        }
    }
};


Java:

class Solution {
    public void moveZeroes(int[] nums) {
        for(int i = 0; i < nums.length;i++){
            if(nums[i] == 0){
                boolean allzeros = true;
                for(int j = i+1; j < nums.length; j++){
                    if(nums[j]!=0){
                        allzeros = false;
                        nums[i] = nums[j];
                        nums[j] = 0;
                        break;
                    }
                }
                if(allzeros) break;
            }
        }
    }
}


better java:
// i is always moving; but will switch with what j points to;
// j is moving when what it points at is !0, but will stop at 0s and move after switch;

public void moveZeroes(int[] nums) {

    int j = 0;
    for(int i = 0; i < nums.length; i++) {
        if(nums[i] != 0) {
            int temp = nums[j];
            nums[j] = nums[i];
            nums[i] = temp;
            j++;
        }
    }
}


