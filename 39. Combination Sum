/*Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]*/

C++:
Using backtrack:
class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> result;
        sort(candidates.begin(),candidates.end());
        vector<int>answer;
        backtrack(candidates,target,0,result,answer);
        return result;
    }
    void backtrack(vector<int> &candidates, int target, int i, vector<vector<int>> &result,vector <int> &answer){
        if(target < 0) return;
        if(target == 0){
            result.push_back(answer);
        }else{
            if(target > 0){
                for(int j = i; j < candidates.size(); j++){
                    answer.push_back(candidates[j]);
                    backtrack(candidates, target - candidates[j], j, result, answer);
                    answer.pop_back();
                }
            }
        }
    }
};

Java:
Using backtrack:

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(result,new ArrayList<>(),candidates,target,0);
        return result;
    }
    public void backtrack(List<List<Integer>> result, List<Integer> list, int[] candidates, int target, int start){
        if(target < 0) return;
        if(target == 0) {
            result.add(new ArrayList<>(list));
        }else{
            for(int i = start; i < candidates.length; i++){
                list.add(candidates[i]);
                backtrack(result, list, candidates, target - candidates[i], i);
                list.remove(list.size() - 1);
            }
        }
    }
}
