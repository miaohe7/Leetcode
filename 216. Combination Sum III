/*Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]*/

C++:
Using backtrack:
class Solution {
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> result;
        vector<int> list;
        backtrack(result,list,k,n,1);
        return result;
    }
    void backtrack(vector<vector<int>> &result, vector<int> &list,int k, int n, int start){
        if(list.size() > k || n < 0) return;
        if(list.size() == k && n == 0){
            result.push_back(list);
        }else{
            for(int i = start; i <= 9; i++){
                list.push_back(i);
                backtrack(result, list, k, n - i, i+1);
                list.pop_back();
            }
        }
    }
};

Java:

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), k,n,1);
        return result;
    }
    public void backtrack(List<List<Integer>> result, List<Integer> list,
                         int k, int n, int start){
        if(list.size() > k || n < 0) return;
        if(list.size() == k && n == 0){
            result.add(new ArrayList<>(list));
        }else{
            for(int i = start; i <= 9; i++){
                list.add(i);
                backtrack(result, list, k, n - i, i+1);
                list.remove(list.size()-1);
            }
        }
    }
}
