/*Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.*/

Gready Algorithm:

C++:
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        int curSum = nums[0];
        int maxSum = nums[0];
        
        for(int i = 1; i < n; i++){
            curSum = max(nums[i], curSum + nums[i]);
            maxSum = max(curSum, maxSum);
        }
        return maxSum;
    }
};

Java:
class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;
        int maxSum = nums[0];
        int curSum = nums[0];
        
        for(int i = 1; i < n; i++){
            curSum = Math.max(nums[i], curSum+nums[i]);
            maxSum = Math.max(curSum, maxSum);
        }
        return maxSum;
    }
}

Divide and Conqur:
Java:
class Solution {
    public int crossSum(int [] nums, int left, int right, int p){
        if(left == right) return nums[left];
        int leftSum = Integer.MIN_VALUE;
        int curSum = 0;
        for(int i = p; i > left - 1; i--){
            curSum += nums[i];
            leftSum = Math.max(leftSum, curSum);
        }
        int rightSum = Integer.MIN_VALUE;
        curSum = 0;
        for(int i = p + 1; i < right + 1;  i++){
            curSum += nums[i];
            rightSum = Math.max(rightSum, curSum);
        }
        return leftSum + rightSum;
    }
    public int helper(int []nums, int left, int right){
        if(left == right) return nums[left];
        int p = (left + right)/2;
        int leftSum = helper(nums,left,p);
        int rightSum = helper(nums, p+1,right);
        int crossSum = crossSum(nums,left,right,p);
        return Math.max(Math.max(leftSum,rightSum),crossSum);      
    }
    public int maxSubArray(int[] nums) {
        return helper(nums,0,nums.length - 1);
    }
}

Dynamic Programming:
C++:
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        int maxSum = nums[0];
        for(int i = 1; i < n; i++){
            if(nums[i-1] > 0) nums[i] += nums[i - 1];
            maxSum = max(maxSum,nums[i]);
        }
        return maxSum;
    }
};
