/*The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.

Determine the maximum amount of money the thief can rob tonight without alerting the police.

Example 1:

Input: [3,2,3,null,3,null,1]

     3
    / \
   2   3
    \   \ 
     3   1

Output: 7 
Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
Example 2:

Input: [3,4,5,1,3,null,1]

     3
    / \
   4   5
  / \   \ 
 1   3   1

Output: 9
Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.*/

C++:
Naive solution: recursion:
We either choose to steal from the grandchild, or the direct child. Then we compare the result of granchild with direct child.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int rob(TreeNode* root) {
        if(root == NULL) return 0;
        int val = 0;
        if(root->left != NULL){ 
            val += rob(root->left->left) + rob(root->left->right);
        }
        if(root->right != NULL){
            val += rob(root->right->left) + rob(root->right->right);
        }
        return max(root->val + val, rob(root->left) + rob(root->right));
    }
};

Solution 2:
Using Basic DP to save the calculated result;

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int rob(TreeNode* root) {
        map <TreeNode* , int> m;
        return robsub(root,m);
    }
    int robsub(TreeNode* node, map <TreeNode *, int> m){
        if(node == NULL) return 0;
        if(m.count(node) > 0) return m[node];
        int val = 0;
        
        if(node->left != NULL){
            val += robsub(node->left->left, m) + robsub(node->left->right,m);
        }
        if(node->right != NULL){
            val += robsub(node->right->left, m) + robsub(node->right->right, m);
        }
        
        val = max(val + node->val, robsub(node->left,m) + robsub(node->right, m));
        m[node] = val;
        return val;
    }
};

Solution 3:
Elegant solution, passing a pair to not lose information;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int rob(TreeNode* root) {
        auto res = robsub(root);
        return max(res.first, res.second);
    }
    pair<int,int> robsub(TreeNode * node){
        if(node == NULL) return make_pair(0,0);
        auto left = robsub(node->left);
        auto right = robsub(node->right);
        int res0 = max(left.first,left.second) + max(right.first,right.second);
        int res1 = node->val + left.first + right.first;
        return make_pair(res0,res1);
    }
};

https://leetcode.com/problems/house-robber-iii/discuss/79330/Step-by-step-tackling-of-the-problem
