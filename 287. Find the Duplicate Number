/*Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.

Example 1:

Input: [1,3,4,2,2]
Output: 2
Example 2:

Input: [3,1,3,4,2]
Output: 3
Note:

You must not modify the array (assume the array is read only).
You must use only constant, O(1) extra space.
Your runtime complexity should be less than O(n2).
There is only one duplicate number in the array, but it could be repeated more than once.*/

1. Hare and tortoise:

Similar to linked List cycle II;
Using slow and fast int pointer to find if there is a cycle (sure there is), then use it to find the entry point of the cycle:
the duplicate;

C++:
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int hare = nums[0];
        int tortoise = nums[0];
        do{
            tortoise = nums[tortoise];
            hare = nums[nums[hare]];
        }while(hare != tortoise); //find if there is the cycle
        int ptr1 = nums[0]; // use ptr1 & slow to find the entry point;
        int ptr2 = tortoise;
        while(ptr1 != ptr2){
            ptr1 = nums[ptr1];
            ptr2 = nums[ptr2];
        }
        return ptr1;
    }
};

2. Binary search (without sorting)
// This solution is using the density of the middle number;
https://leetcode.com/problems/find-the-duplicate-number/discuss/72841/Java-O(1)space-using-Binary-Search

class Solution {
    public int findDuplicate(int[] nums) {
        int low = 1, high = nums.length - 1;
        while(low <= high){
            int mid = (int) (low + (high - low) * 0.5);
            int cnt = 0;
            for(int a : nums){
                if(a <= mid) ++cnt;
            }
            if(cnt <= mid) low = mid + 1;
            else high = mid - 1;
        }
        return low;
    }
}
