/*Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
  3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]*/

C++:

Recursion:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    map <int, vector<int>> tree;
    vector<vector<int>> levelOrder(TreeNode* root) {
        traverse(root,0);
        vector<vector<int>> traversal;
        for(auto t: tree){
            traversal.push_back(t.second);
        }
        return traversal;
    }
    void traverse(TreeNode* root, int level){
        if(root == NULL) return;
        tree[level].push_back(root->val);
        if(root->left != NULL){
            traverse(root->left, level+1);
        }
        if(root->right != NULL){
            traverse(root->right, level+1);
        }
    }
};

Iteration:
Use queue: FIFO, insert from back pop from top;

class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> levels;
        if(root == NULL) return levels;
        queue <TreeNode * > q;
        q.push(root);
        int level = 0;
        while(!q.empty()){
            vector<int> curlevel;
            int level_size = q.size();
            for(int i = 0; i < level_size; i++){
                TreeNode * node = q.front();
                q.pop();
                curlevel.push_back(node->val);
                if(node->left != NULL) q.push(node->left);
                if(node->right != NULL) q.push(node->right);
            }
            levels.push_back(curlevel);
        }
        return levels;
    }
};

Java:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<List<Integer>> levels = new ArrayList<List<Integer>>();
    
    public void helper(TreeNode node, int level){
        if(levels.size() == level){
            levels.add(new ArrayList<Integer>());
        }
        levels.get(level).add(node.val);
            if(node.left != null){
                helper(node.left, level+1);
            }
            if(node.right != null){
                helper(node.right, level+1);
            }
    }
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null) return levels;
        helper(root, 0);
        return levels;
    }
}


Iteration:
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> levels = new ArrayList<List<Integer>>();
        if(root == null) return levels;
        int level = 0;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        while(! queue.isEmpty()){
            levels.add(new ArrayList<Integer>());
            int level_length = queue.size();
            for(int i = 0; i < level_length; i++){
                TreeNode node = queue.remove();
                
                levels.get(level).add(node.val);
                if(node.left != null) queue.add(node.left);
                if(node.right != null) queue.add(node.right);
            }
            level++;
        }
        return levels;
    }
}
