/*Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

Note: Do not modify the linked list.

 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.


Example 2:

Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.


Example 3:

Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.


 

Follow-up:
Can you solve it without using extra space?*/

https://leetcode.com/problems/linked-list-cycle-ii/

C++:
//using two pointers; 
// the way of detecting cycle is still using two pointers: one fast with speed = 2;
// one slow with speed = 1;
// Fast will eventually catch up with slow if there is a cycle;

// Further more, the place of collision will be:
// assume that the entry of cycle have a distance with collision point of b;
// Assume the entry of cycle have a distance of a between head and entry;
// we can say that a + b = n * C(with C be the length of the cycle)
// Therefore, if we now set up a new pointer called entry, initially point to the head;
//This pointer and the slow pointer will eventually encounter at the entry point of the cycle.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if(head == NULL || head->next == NULL){
            return NULL; // there is no cycle;
        }
        ListNode * slow = head;
        ListNode * fast = head;
        ListNode * entry = head;
        while(fast->next && fast->next->next){//while fast next not null
            // and while fast next next not null;
            slow = slow->next;
            fast = fast->next->next;
            if(slow == fast){// there is a cycle;
                while(slow != entry){
                    slow = slow->next;
                    entry = entry->next;
                }
                return entry;
            }
        }
        return NULL; // there is no cycle
    }
};


Java:

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head == null || head.next == null){
            return null;
        }
        ListNode fast = head;
        ListNode slow = head;
        ListNode entry = head;
        while(fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast){// there is a cycle
                while(slow != entry){
                    slow = slow.next;
                    entry = entry.next;
                }
                return entry;
            }
        }
        return null;
    }
}
