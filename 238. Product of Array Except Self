
/*(Given an array nums of n integers where n > 1,  
return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]
Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? 
(The output array does not count as extra space for the purpose of space complexity analysis.)*/



C++:
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int> result;
        int length = nums.size();
        int L [length];
        int R [length];
        L[0]= 1;
        for(int i = 1; i < length; i++){
            L[i] = nums[i-1]*L[i-1];
        }
        R[length - 1] = 1;
        for(int i = length - 2; i >= 0; i--){
            R[i] = nums[i+1] * R[i+1];
        }
        for(int i = 0; i < length; i++){
            result.push_back(L[i] * R[i]);
        }
        return result;
    }
};

Java:

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int length = nums.length;
        int [] L = new int[length];
        int [] R = new int[length];
        
        int[] answer = new int [length];
        L[0] = 1;
        for(int i = 1; i < length; i++){
            L[i] = nums[i-1] * L[i - 1];
        }
        R[length -1] = 1;
        for(int i = length - 2; i >= 0; i--){
            R[i] = nums[i+1] * R[i + 1];
        }
        for(int i = 0; i < length; i++){
            answer[i] = L[i] * R[i];
        }
        return answer;
    }
}

Using O(1) extra space:
Use the answer array to construct L & R array;

Java:

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int length = nums.length;
        
        int[] answer = new int [length];
        answer [0] = 1;
        for(int i = 1; i < length; i++){
            answer[i] = nums[i-1] * answer[i - 1];
        }
        int R = 1;
        for(int i = length - 1; i >= 0; i--){
            answer[i] = answer[i] * R;
            R *= nums[i];
        }
        return answer;
    }
}
