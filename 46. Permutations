/*Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]*/

Java:
Using Heap's Algorithm:
https://en.wikipedia.org/wiki/Heap%27s_algorithm
class Solution {
    public void backtrack(int n, 
                          ArrayList<Integer> nums,
                          List<List<Integer>> output,
                          int first)
    {
        if(first == n){
            output.add(new ArrayList<Integer> (nums));
        }
        for(int i = first; i < n; i++){
            Collections.swap(nums, first,i);
            backtrack(n,nums,output,first+1);
            Collections.swap(nums,first,i);
        }
    }   
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> output = new LinkedList();
        ArrayList<Integer> nums_lst = new ArrayList<Integer>();
        for(int num : nums){
            nums_lst.add(num);
        }
        int n = nums.length;
        backtrack(n, nums_lst, output, 0);
        return output;
    }
}

C++:

class Solution {
public:
    void backtrack(vector<int> &nums, int l, int r, vector<vector<int>> &result){
        if(l == r){
            result.push_back(nums);
        }else{
            for(int i = l; i <= r; i++){
                swap(nums[l],nums[i]);
                backtrack(nums,l+1,r,result);
                swap(nums[l],nums[i]);
            }
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> result;
        backtrack(nums,0,n-1,result);
        return result;
    }
};
