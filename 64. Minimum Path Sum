/*Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.*/

C++:
DP:

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int list[m][n];
        list[0][0] = grid[0][0];
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(i==0 && j==0) continue;
                if(i == 0){
                    list[i][j] = list[i][j-1] + grid[i][j];
                }
                else if(j == 0){
                    list[i][j] = list[i-1][j] + grid[i][j];
                }else{
                    list[i][j] = min(list[i-1][j], list[i][j-1]) + grid[i][j];
                }
            }
        }
        return list[m-1][n-1];    
    }
};
