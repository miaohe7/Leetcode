Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]


Using bit map:
use the power set and map the 1 and 0 to the nums;

C++:
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> result;
        int length = nums.size();
        powerset(result, nums, length);
        return result;
    }
    void powerset(vector<vector<int>> &result, vector<int> &nums, int length){
        int size = pow(2,length);
        int counter, j;
        for(counter = 0; counter < size; counter ++){
            vector<int> subset;
            for(j = 0; j < length; j++){
                if(counter & (1<<j)){
                    subset.push_back(nums[j]);
                }
            }
            result.push_back(subset);
        }
    }
};

Java:
For each integer, add it to each existing subset to form a new subset.

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> output = new ArrayList();
        output.add(new ArrayList<Integer>());
        for(int num : nums){ //for each num
            List<List<Integer>> newSubsets = new ArrayList(); //create a new set of subset strings
            for(List<Integer> curr : output){ //for each existing subset
                newSubsets.add(new ArraList<Integer>(curr){{add(num);}}); //add the current number into the existing subset to form a new subset
            }
            for(List<Integer> curr : newSubsets){
                output.add(curr); //add these newly formed new subset into the output subset;
            }
        }
        return output;
    }
}

Java:
Using backtrack:

class Solution {
    List<List<Integer>> output = new ArrayList();
    int n,k;
    public void backtrack(int first, ArrayList <Integer> curr, int[] nums){
        if(curr.size() == k)
            output.add(new ArrayList(curr));
        for(int i = first; i < n; i++){
            curr.add(nums[i]);
            backtrack(i+1, curr, nums);
            curr.remove(curr.size() -1);
        }
    }
    public List<List<Integer>> subsets(int[] nums) {
        n = nums.length;
        for(k = 0; k< n+1; k++){
            backtrack(0, new ArrayList<Integer>(), nums);
        }
        return output;
    }
}
