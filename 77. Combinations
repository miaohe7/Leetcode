/*Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

Example:

Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]*/

Backtrack solution:
C++:

class Solution {
public:
    vector<vector<int>> combine(int n, int k) {
        vector<vector<int>> result;
        vector<int> curr;
        backtrack(n,k,1,result,curr);
        return result;
    }
    void backtrack(int n, int k, int first, vector<vector<int>> &result, vector<int> curr){
        if(curr.size() == k){
            result.push_back(curr); // push the finished combination
        }
        for(int j = first; j <= n; j++){
            curr.push_back(j); //push current first number to combination;
            backtrack(n,k,j+1,result,curr); // finish the combination with next(rest) nums;
            curr.pop_back(); // remove the current first number
        }
    }
};
