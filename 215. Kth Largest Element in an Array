/*Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Example 1:

Input: [3,2,1,5,6,4] and k = 2
Output: 5
Example 2:

Input: [3,2,3,1,2,4,5,5,6] and k = 4
Output: 4
Note:
You may assume k is always valid, 1 ≤ k ≤ array's length.*/

C++:
sort:

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        vector<int> sorted = nums;
        sort(sorted.begin(), sorted.end());
        int size = nums.size();
        return sorted[size - k];
    }
};

Also can use quick sort:
choose a pivot, place the number smaller than it before this number; number bigger than it after this number;




Java:
//Min heap:
class Solution {
    public int findKthLargest(int[] nums, int k) {
        //smallest element first -> min heap
        PriorityQueue<Integer> heap =
            new PriorityQueue<Integer>((n1,n2) -> n1 - n2); /* this is short handed for Comparator<Integer> result = new Comparator<Integer>() {
        @Override
        public int compare(Integer n1, Integer n2){
            return n1.compareTo(n2);
        }
    };

PriorityQueue<Integer> heap = new PriorityQueue<Integer>(result);*/
        for(int n : nums){
            heap.add(n);
            if(heap.size() > k)
                heap.poll();
        }
        return heap.poll();
    }
}

