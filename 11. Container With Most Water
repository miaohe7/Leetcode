/*Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Note: You may not slant the container and n is at least 2.*/

Brute Force:

Java:

class Solution {
    public int maxArea(int[] height) {
        int maxarea = 0;
        for(int i = 0; i < height.length; i++){
            for(int j = i + 1; j < height.length; j++){
                maxarea = Math.max(maxarea, Math.min(height[i],height[j])*(j-i));
            }
        }
        return maxarea;
    }
}

C++:
class Solution {
public:
    int maxArea(vector<int>& height) {
        int left;
        int right;
        if(height.size()<2) return 0;
        if(height.size() == 2) return min(height[0],height[1]);
        int maxsize = 0;
        for(int i = 0; i < height.size();i++){
            for(int j = i + 1; j < height.size();j++){
                maxsize = max(maxsize, min(height[i],height[j]) * (j - i));
            }
        }
        return maxsize;
    }
};

Two pointers:

Java:
class Solution {
    public int maxArea(int[] height) {
        int maxarea = 0;
        int l = 0;
        int r = height.length - 1;
        while(l < r){
            maxarea = Math.max(maxarea, Math.min(height[l],height[r]) * (r-l));
            if(height[l] > height[r])
                r--;
            else l++;
        }
        return maxarea;
    }
}

C++:
class Solution {
public:
    int maxArea(vector<int>& height) {
        int maxarea = 0;
        int l = 0;
        int r = height.size() - 1;
        while(l < r){
            maxarea = max(maxarea,min(height[l],height[r])*(r-l));
            if(height[l] < height[r]){
                l++;
            }else{
                r--;
            }
        }
        return maxarea;
    }
};
