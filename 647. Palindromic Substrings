/*Given a string, your task is to count how many palindromic substrings in this string.

The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example 1:

Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
 

Example 2:

Input: "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".*/

Brute Force: // Exceed time limit
C++:
class Solution {
public:
    int countSubstrings(string s) {
        int count = 0;
        unordered_map<string,int> m;
        int n = s.length();
        for(int i = 0; i < n; i++){
            for(int j = i; j < n; j++){
                m[s.substr(i,j-i+1)]++;
            }
        }
        for(const auto& [key, value]:m){
            if(palindrome(key)){
                count+= m[key];
            }
        }
        return count;
        //produce all the substrings
        //for each substring; determine whether it is palindromic
        //count
    }
    bool palindrome(string ss){
        string re = ss;
        reverse(re.begin(),re.end());
        return (re == ss);
    }
};

ExtendPalindrome:
For each index, expend it to see if it is a palindrome for both odd and even length:
Java:

class Solution {
    public int countSubstrings(String s) {
        int count = 0;
        for(int i = 0; i < s.length();i++){
            count += extractPalindrome(s,i,i); //odd (i + 1 + i)
            count += extractPalindrome(s,i,i+1); //even (i + 1 + i + 1)
        }
        return count;
    }
    public int extractPalindrome(String s, int left, int right){
        int count = 0;
        while(left >= 0 && right < s.length() && (s.charAt(left) == s.charAt(right))){ // compare charAt(left) index
        // with charAt(right) index.
            left--;
            right++;
            count++;
        }
        return count;
    }
}

