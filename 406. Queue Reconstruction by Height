
/*Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers (h, k), where h is the height of the person and k is the number of people in front of this person who have a height greater than or equal to h. Write an algorithm to reconstruct the queue.

Note:
The number of people is less than 1,100.

 
Example

Input:
[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]

Output:
[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]*/


First sort all the people in descending order; but for people with same height, sort in ascending order through their k value;
Then, insert people to the result queue, just by their k value;
Reasoning:
https://leetcode.com/articles/queue-reconstruction-by-height/


C++:

class Solution {
public:
        static bool compareheight(vector<int> o1, vector<int> o2){
        return o1[0] == o2[0]? o1[1] < o2[1]:o1[0] > o2[0];
    }
    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {
        sort(people.begin(),people.end(),compareheight);
        vector<vector<int>> result;
        for(auto p: people){
            result.insert(result.begin()+ p[1],p);
        }
        return result;
    }
};


Java:

class Solution {
    public int[][] reconstructQueue(int[][] people) {
        Arrays.sort(people, new Comparator<int[]>(){ //notice the Comparator class here
            @Override
            public int compare(int[] o1, int[] o2){
                //if the heights are equal, compare k-values
                return o1[0] == o2[0]? o1[1] - o2[1]: o2[0] - o1[0];
            }
        });
        List<int[]> output = new LinkedList<>();
        for(int [] p: people){
            output.add(p[1],p);
        }
        int n = people.length;
        return output.toArray(new int[n][2]);
    }
}
