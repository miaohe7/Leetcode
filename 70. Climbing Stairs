/*You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step*/

// We can see, the # of ways steping n stairs, is equal to ( # of ways steping n - 1 stairs ) + ( # of ways steping n - 2 stairs)
//because n stair's last one step is either 1 stair(represent # of ways steping n - 1 stair ) or 2 stairs (represent  # of ways steping n - 2 stairs)
//base case would be when n = 1 -> 1; when n = 2 -> 2; 

//Therefore, it is a lot similar to fibonacci numbers but backwards(if we think of this way)
//You can also think of it in a forward way of fibonacci numbers:
// # of ways steping from stair 0 to stair n = ( # of ways steping from stair 1 to stair n) + ( # of ways steping from stair 2 to stair n)
//recursively. The base case would be (from n - 1 to n = 1) from (n -2 to n = 2)

We use the backward thought, with memoization (dynamic programming)

Java:

class Solution {
    public int climbStairs(int n) {
        if(n == 1){
            return 1;
        }
        int[] dp = new int[n+1];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i <= n; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
        }
}

C++:
class Solution {
public:
    int climbStairs(int n) {
        if(n == 1){
            return 1;
        }
        int dp[n+1];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i <= n; i++){
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }    
};
