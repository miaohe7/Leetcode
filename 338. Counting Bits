/*Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example 1:

Input: 2
Output: [0,1,1]
Example 2:

Input: 5
Output: [0,1,1,2,1,2]*/

C++:
using __builtin_popcount

class Solution {
public:
    vector<int> countBits(int num) {
        vector <int> result;
        for(int i = 0; i <= num; i++){
            int j = __builtin_popcount(i);
            result.push_back(j);
        }
        return result;
    }
};


Java:
use self-defined popcount:
class Solution {
    public int[] countBits(int num) {
        int [] ans = new int[num + 1];
        for(int i = 0; i <= num; i++){
            ans[i] = popcount(i);
        }
        return ans;
    }
    private int popcount(int x){
        int count;
        for(count = 0; x != 0; count++){
            x &= x - 1;
        }
        return count;
    }
}
