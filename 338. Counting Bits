/*Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example 1:

Input: 2
Output: [0,1,1]
Example 2:

Input: 5
Output: [0,1,1,2,1,2]*/

C++:
using __builtin_popcount

class Solution {
public:
    vector<int> countBits(int num) {
        vector <int> result;
        for(int i = 0; i <= num; i++){
            int j = __builtin_popcount(i);
            result.push_back(j);
        }
        return result;
    }
};


Java:
use self-defined popcount:
class Solution {
    public int[] countBits(int num) {
        int [] ans = new int[num + 1];
        for(int i = 0; i <= num; i++){
            ans[i] = popcount(i);
        }
        return ans;
    }
    private int popcount(int x){
        int count;
        for(count = 0; x != 0; count++){
            x &= x - 1;
        }
        return count;
    }
}

DP + most significant bit:
Java:
P(x+b) = P(x) + 1; b = 2^m > x;

class Solution {
    public int[] countBits(int num) {
        int [] ans = new int[num + 1];
        int i = 0, b = 1;
        //[0,b) is calculated
        while(b <= num){
            while( i < b && i + b <= num){
                ans[i + b] = ans[i] + 1;
                i++;
            }
            i = 0; //reset i
            b <<= 1; //b = 2b;
        }
        return ans;
    }
}

Java:
DP + Least significant bits:
P(x) = P(x/2) + (x mod 2);
class Solution {
    public int[] countBits(int num) {
        int [] ans = new int[num + 1];
        for(int i = 1; i <= num; i++){
            ans[i] = ans[i>>1] + (i & 1); // x/2 == x >>1  x&1 can be used to check the last bit
        }
        return ans;
    }
}

Java: 
DP + Last set bit:
P(x) = P(x & (x-1)) + 1 // flipping the least significant bit;

class Solution {
    public int[] countBits(int num) {
        int [] ans = new int[num + 1];
        for(int i = 1; i <= num; i++){
            ans[i] = ans[i & (i - 1)] + 1;
        }
        return ans;
    }
}


