/*Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]*/

Recursion:
C++:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        if(root != NULL){
            vector<int> A = inorderTraversal(root->left);
            vector<int> B = inorderTraversal(root->right);
            A.push_back(root->val);
            A.insert(A.end(),B.begin(),B.end());
            return A;
        }else{
            vector<int> empty;
            return empty;
        }
    }
};

Java:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        if(root == null){
            return new ArrayList<Integer>(); // notice that return an empty list should be new ArrayList
            // if use emptyList() will return an unimutable list; not suitable in this case
        }else{
            List<Integer> A = inorderTraversal(root.left);
            List<Integer> B = inorderTraversal(root.right);
            A.add(A.size(),root.val);
            A.addAll(B);
            return A;
        }
    }
}

Iterative:
Use stack, 
Condition will be both current node not null and stack not empty in the outside(which means if both node is empty and stack is empty the entire loop
ends); for the inside, check if the current node is not null, if so means there is left node, push the cur node to stack, then iterate to its 
left node; when node reaches null, we pop the stack, each pop push_back the val to result;

C++:

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        stack <TreeNode *> stack;
        vector<int> result;
        TreeNode * cur = root;
        while(cur != NULL || !stack.empty()){
            while(cur != NULL){
                stack.push(cur);
                cur = cur->left;
            }
            cur = stack.top();
            result.push_back(cur->val);
            stack.pop();
            cur = cur->right;
        }
        return result;
    }
};


Java:

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        Stack <TreeNode> stack = new Stack<TreeNode>();
        List<Integer> result = new ArrayList<Integer>();
        TreeNode cur = root;
        while(cur != null || !stack.empty()){
            while(cur != null){
                stack.push(cur);
                cur = cur.left;
            }
            cur = stack.peek();
            result.add(cur.val);
            stack.pop();
            cur = cur.right;
        }
        return result;
    }
}

Java:
