Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.
 
 
 Square and then sort:
 Time complexity = O(nlogn)
 
 class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        size_t n = nums.size();
        vector <int> ans(n);
        for(size_t i = 0; i < n ; i++){
            ans[i] = nums[i] * nums[i];
        }
        sort(ans.begin(), ans.end());
        return ans;
    }
    
};


Two pointers approach:

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        size_t n = nums.size();
        int left = 0;
        int right = n - 1;
        int i = n - 1;
        vector<int> ans(n);
        while(i >= 0){
            int square;
        if(abs(nums[left]) > abs(nums[right])){
            square = nums[left];
            left++;
            
            }else{
            square = nums[right];
            right--;
            
        }
            ans[i] = square * square;
            i--;
        }
        return ans;
    }
    
};

*******************************************************************
Given an array, rotate the array to the right by k steps, where k is non-negative.

 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
0 <= k <= 105
 

Follow up:

Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.
Could you do it in-place with O(1) extra space?



1: Brute force:
O(kn)
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        size_t n = nums.size();
        k %= n;
        int temp, previous;
        for(int i = 0; i < k; i ++){ //rotate k times, even if k might > nums.size();
            previous = nums[n - 1];
            for(int j = 0; j < n; j++){ //each time put the last number to the front and do the rotation
                temp = nums[j];
                nums[j] = previous;
                previous = temp;
            }
        }
    }
};


2. Use another array:
 the number at index i in the original array is placed at the index (i + k) % length of array 
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        size_t n = nums.size();
        vector<int> ans(n);
        for(int i = 0; i < n; i++){
            ans[(i+k) % n] = nums[i];
        }
        for(int i = 0; i < n; i++){
            nums[i] = ans[i]; 
        }
    }
};


3.Use Cyclic Replacement

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        size_t n = nums.size();
        k = k % n;
        int count = 0;
        
        for(int start = 0; count < n; start++){
            int current = start;
            int prev = nums[start];
            do {
                int next = (current + k) %n;
                int temp = nums[next];
                nums[next] = prev;
                prev = temp;
                current = next;
                count++;
            }while(start != current);
        }
    }
};

3. Reverse

Let n = 7n=7 and k = 3k=3.

Original List                   : 1 2 3 4 5 6 7
After reversing all numbers     : 7 6 5 4 3 2 1
After reversing first k numbers : 5 6 7 4 3 2 1
After revering last n-k numbers : 5 6 7 1 2 3 4 --> Result

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        size_t n = nums.size();
        k %= n;
        reverse(nums, 0, n - 1);
        reverse(nums, 0, k-1);
        reverse(nums, k, n-1);
    }
    
    void reverse(vector<int>& nums, int start, int end){
        while(start < end){
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
};


