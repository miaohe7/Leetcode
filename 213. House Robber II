/*You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.

Example 1:

Input: [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2),
             because they are adjacent houses.
Example 2:

Input: [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
             Total amount you can rob = 1 + 3 = 4.*/

C++:
Using the result from Robber I; 
Seperate into two cases, first case exclude the first house; second case exclude the last house;
In these case, the base case would have to be not only nums.size == 0, but also nums.size == 1, nums.size == 2;

class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.size() == 0) return 0;
        if(nums.size() == 1) return nums[0];
        if(nums.size() == 2) return max(nums[0],nums[1]);
        //case 1: excluding last house;
        int prev1 = nums[0];
        int prev2 = 0;
        int temp;
        for(int i = 1; i < nums.size()-1; i++){
            temp = prev1;
            prev1 = max(prev2+nums[i], prev1);
            prev2 = temp;
        }
        int r1 = max(prev1, prev2);
        
        //case2: excluding first house;
        prev1 = nums[1];
        prev2 = 0;
        for(int i = 2; i < nums.size(); i++){
            temp = prev1;
            prev1 = max(prev2 + nums[i], prev1);
            prev2 = temp;
        }
        int r2 = max(prev1,prev2);
        return max(r1,r2);
    }
};
