/*Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]*/

C++:

Backtrack:

class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<vector<int>> result;
        vector<int> list;
        backtrack(candidates,target,result,list,0);
        return result;
    }
    void backtrack(vector<int> & candidates, int target, vector<vector<int>> & result,
                  vector<int> &list, int start){
        if(target < 0) return;
        if(target == 0){
            result.push_back(list);
        }else{
            for(int i = start; i < candidates.size(); i++){
                if(i > start && candidates[i] == candidates[i-1]) continue;
                list.push_back(candidates[i]);
                backtrack(candidates, target - candidates[i], result,list, i+1);
                list.pop_back();
            }
        }
    }
};

Java:
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result,candidates,target, new ArrayList<>(), 0);
        return result;
    }
    public void backtrack(List<List<Integer>> result, int[] candidates, int target, List<Integer> list, int start){
        if(target < 0) return;
        if(target == 0){
            result.add(new ArrayList<>(list));
        }else{
            for(int i = start; i < candidates.length; i++){
                if(i > start && candidates[i] == candidates[i-1]) continue;
                list.add(candidates[i]);
                backtrack(result, candidates,target - candidates[i], list, i+1);
                list.remove(list.size() - 1);
            }
        }
    }
}
