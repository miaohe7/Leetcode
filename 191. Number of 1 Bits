/*Write a function that takes an unsigned integer and return the number of '1' bits it has (also known as the Hamming weight).

 

Example 1:

Input: 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.
Example 2:

Input: 00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.
Example 3:

Input: 11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.*/

Brute force:
Using 1 & n , each time << 1 bit to see if there is a 1 bit;
C++:
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int mask = 1;
        int sum = 0;
        for(int i = 0; i < 32;i++){
            if((mask & n) != 0){ // notice that & with && have different primarity, therefore the quote is not negligible
                sum++;
            }
            mask = (mask & 0xffffffff)<<1; //this step is to help mask does not go negetive(something relative to unsigned int)
        }        
        return sum;
    }
};


Fliping the 1 Least significant by doing n&n-1:
Java:
public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int sum = 0;
        while(n != 0){
            sum++;
            n &= (n -1);
        }
        return sum;
    }
}

C++:
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int sum = 0;
        while(n != 0){
            sum++;
            n &= (n-1);
        }
        return sum;
    }
};
