/*You are given an n x n 2D matrix representing an image.

Rotate the image by 90 degrees (clockwise).

Note:

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Example 1:

Given input matrix = 
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
],

rotate the input matrix in-place such that it becomes:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]
Example 2:

Given input matrix =
[
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
], 

rotate the input matrix in-place such that it becomes:
[
  [15,13, 2, 5],
  [14, 3, 4, 1],
  [12, 6, 8, 9],
  [16, 7,10,11]
]*/

C++:
Swap 3 times to make sure each direction get its final value;
Divided into two situations: n is odd or n is even;
If n is even, we just swap the top-left part of the matrix which will for sure cover all of the cases in the matrix;
if n is odd, after swap the top-left, we also need to swap the line n/2.

// However, apparently you can do it instead of a square (in my case), but a rectangle, then you don't have to swap the center piece seperately;
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int size = n / 2;
        for(int i = 0; i < size; i++){
            for(int j = 0; j < size; j++){
                swap(matrix[i][j],matrix[j][n-i-1]);
                swap(matrix[i][j],matrix[n-i-1][n-j-1]);
                swap(matrix[i][j],matrix[n-j-1][i]);
            }
        }
        if(n%2 > 0){
            for(int k = 0; k < n/2; k++){
                swap(matrix[k][n/2],matrix[n/2][n-k-1]);
                swap(matrix[k][n/2],matrix[n-k-1][n-n/2-1]);
                swap(matrix[k][n/2],matrix[n-n/2-1][k]);
            }
        }
    }
};

Java:
The transpose and then reverse solution:
class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        
        //transpose matrix
        for(int i = 0; i < n; i++){
            for(int j = i; j < n; j++){
                int tmp = matrix[j][i];
                matrix[j][i] = matrix[i][j];
                matrix[i][j] = tmp;
            }
        }
        //reverse each row
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n/2; j++){
                int tmp = matrix[i][j];
                matrix[i][j] = matrix[i][n - j - 1];
                matrix[i][n-j-1] = tmp;
            }
        }
    }
}
