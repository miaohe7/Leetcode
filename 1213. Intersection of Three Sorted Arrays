/*Given three integer arrays arr1, arr2 and arr3 sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.

 

Example 1:

Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]
Output: [1,5]
Explanation: Only 1 and 5 appeared in the three arrays.
 

Constraints:

1 <= arr1.length, arr2.length, arr3.length <= 1000
1 <= arr1[i], arr2[i], arr3[i] <= 2000*/

class Solution {
public:
    vector<int> arraysIntersection(vector<int>& arr1, vector<int>& arr2, vector<int>& arr3) {
        vector <int> result;
        map <int,int> map;
        int maxindex = max(arr1.size(),max(arr2.size(),arr3.size()));
        int i = 0;
        while(i < maxindex){
            if(i < arr1.size()){
                map[arr1[i]]++;
            }
            if(i < arr2.size()){
                map[arr2[i]]++;
            }
            if(i < arr3.size()){
                map[arr3[i]]++;
            }
            i++;
        }
        for(auto it = map.begin();it != map.end(); it++){
            if(it->second == 3) result.push_back(it->first);
            }
        return result;
    }
};
