/*Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]*/

Backtrack:
C++:
Generating the string while at the same time, keep track of its validability.

class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        backtrack(ans,"",n,0);
        return ans;
    }
    void backtrack(vector<string>& ans, string cur,int open, int close){
        if(open == 0 && close == 0){
            ans.push_back(cur);
            return;
        }
        
        if(open > 0)
            backtrack(ans, cur+"(", open-1, close+1);
        
        if(close > 0)
            backtrack(ans, cur+")", open, close-1);
        
    }
};

Java:

class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList();
        backtrack(ans,"",0,0,n);
        return ans;
    }
    void backtrack(List<String> ans, String cur, int open, int close, int max){
        if(cur.length() == max*2){
            ans.add(cur);
            return;
        }
        if(open < max){
            backtrack(ans,cur+"(",open+1,close,max);
        }
        if(open > close){
            backtrack(ans,cur+")",open,close+1,max);
        }
    }
}

DP using recursion:
 Java:
 class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList();
        if(n == 0){
            ans.add("");
        }else{
            for(int c = 0; c < n; c++){
                for(String left: generateParenthesis(c)){
                    for(String right: generateParenthesis(n-1-c)){
                        ans.add("("+left+")"+right);
                    }
                }
            }
        }
        return ans;
    }
}

C++:
Not sure how to convert to C++;
