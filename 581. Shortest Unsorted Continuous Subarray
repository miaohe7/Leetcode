/*Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Example 1:
Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Note:
Then length of the input array is in range [1, 10,000].
The input array may contain duplicates, so ascending order here means <=.*/

C++:

class Solution {
public:
struct myclass {
  bool operator() (int i,int j) { return (i<j);}
} myobject;
bool myfunction (int i,int j) { return (i<j); }
    int findUnsortedSubarray(vector<int>& nums) {
        vector <int> sorted = nums;
        sort(sorted.begin(), sorted.end(), myobject);
        if(sorted == nums) return 0;
        int left = 0; 
        int right = nums.size() - 1;
        int i = 0;
        int j = right;
        while(i <= right){
            if(sorted[i] != nums[i]){
                left = i;
                break;
            }else{
                i++;
            }
        }
        while(j >= left){
            if(sorted[j] != nums[j]){
                right = j;
                break;
            }else{
                j--;
            }
        }
        return right-left + 1;
    }
};

Java:
Using O(1) extra space:
https://leetcode.com/problems/shortest-unsorted-continuous-subarray/discuss/103057/Java-O(n)-Time-O(1)-Space
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int n = nums.length;
        int min = nums[n-1];
        int max = nums[0];
        int beg = -1;
        int end = -2;
        for(int i = 0 ; i < n; i++){
            max = Math.max(max, nums[i]);
            min = Math.min(min, nums[n-i-1]);
            if(nums[i] < max) end = i;
            //this step is to iterating through the array, from 0 -> (n-1), find the last element that is not in its right place
            //which means, it is smaller than the biggest element from its left; (b/c it should not)
            
            if(nums[n - i - 1] > min) beg = n - i - 1;
            //this step is to iterating through the array, from n - 1 -> 0 find the last element that is not in its right place
            //which means, it is bigger than the smallest element from its right; (b/c it should not)
        }
        return end - beg + 1; (if beg & end were not reset, since they were initialized as -1 & -2, we still get the right result 0)
    }
}


