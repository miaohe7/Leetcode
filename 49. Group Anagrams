/*Given an array of strings, group anagrams together.

Example:

Input: ["eat", "tea", "tan", "ate", "nat", "bat"],
Output:
[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]
Note:

All inputs will be in lowercase.
The order of your output does not matter.*/

C++:

class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        vector<vector<string>> ans;
        if(strs.size() == 0) return ans;
        map<string, vector<string>> m;
        for(auto s : strs){
            string copy = s;
            sort(copy.begin(), copy.end());
            m[copy].push_back(s);
        }
        for(map<string,vector<string>>::iterator it = m.begin(); it != m.end(); ++it) {
            ans.push_back(it->second);
        }
        return ans;
    }
};

Java:

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        if(strs.length == 0) return new ArrayList();
        Map<String, List> ans = new HashMap<String, List>();
        for(String s: strs){
            char[] ca = s.toCharArray();
            Arrays.sort(ca);
            String key = String.valueOf(ca); // convert any type into string
            if(!ans.containsKey(key)) ans.put(key, new ArrayList());
            ans.get(key).add(s); // add s to the list
        }
        return new ArrayList(ans.values());
    }
}
