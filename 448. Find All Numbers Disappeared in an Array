/*Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Example:

Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]*/



c++:
//method using just two integer counters;
class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector <int> result;
        if(nums.size() > 0){
        int j = 1;
        for(int i = 0; i < nums.size();i++){
            if(nums[i] == j){
                j++;
            }else{
                if(nums[i] > j){
                    for(;j<nums[i];j++){
                    result.push_back(j);
                    }
                    j++;
                }
            }
        }
        if(nums.back() < nums.size()){
            while(j <= nums.size()){
            result.push_back(j);
            j++;
            }
        }
        return result;
    }else return nums;
    }
};

Java:
//method using hash table;
class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        HashMap<Integer, Boolean> hashTable = new HashMap<Integer,Boolean>();
        for(int i = 0; i < nums.length; i++){
            hashTable.put(nums[i],true);
        }
        List<Integer> result = new LinkedList <Integer>();
        for(int i = 1; i <= nums.length(); i++){
            if(!hashTable.containKeys(i)){
                result.add(i);
            }
        }
        return result;
    }
}

Java:
//method using O(N) time, but O(1) space.
//use the index to indicate the appearance of the element.

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        for(int i = 0; i < nums.length; i++){
            int newindex = Math.abs(nums[i]) - 1;
            if(nums[newindex] > 0){
                nums[newindex] *= -1;
            }
        }
        List<Integer> result = new LinkedList<Integer>();
        for(int i = 1; i <= nums.length;i++){
            if(nums[i-1] > 0){
                result.add(i);
            }
        }
        return result;
    }
}
